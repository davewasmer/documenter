"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs_1 = require("fs");
const lodash_1 = require("lodash");
const walk = require("walk-sync");
const requireDir = require("require-dir");
const glob_1 = require("glob");
const createDebug = require("debug");
const debug = createDebug('documenter:documenter');
const extractersDir = path.join(__dirname, 'extracters');
class Extracter {
    constructor(options) {
        this.extracters = requireDir(extractersDir);
        lodash_1.defaults(options, this.defaultOptions(options.dir));
        debug(`Configuring for ${options.dir}`);
        Object.assign(this, options);
    }
    /**
     * Extract docs from the directory
     */
    extract() {
        debug(`Extracting docs for ${this.dir}`);
        return {
            pages: this.extractPages(),
            api: this.extractApi()
        };
    }
    extractPages() {
        let dir = path.join(this.dir, this.pagesDir);
        debug(`Extracting pages for ${this.dir} from ${dir}`);
        let files = walk(dir, { directories: false });
        return files.reduce((pages, file) => {
            debug(`Found a page: ${file}`);
            pages[file] = fs_1.readFileSync(path.join(dir, file), 'utf-8');
            return pages;
        }, {});
    }
    extractApi() {
        debug(`Extracting API for ${this.dir}`);
        let sourceType = this.detectSourceType();
        debug(`Source type for this project seems to be ${sourceType}`);
        if (!sourceType) {
            throw new Error('Cannot extract API docs from this directory: unknown source type. Source must be Typescript or JavaScript');
        }
        return this.extracters[sourceType].default.call(null, this);
    }
    detectSourceType() {
        // Typescript
        if (fs_1.existsSync(path.join(this.dir, 'tsconfig.json'))) {
            return 'typescript';
            // JavaScript
        }
        else if (glob_1.sync(path.join(this.dir, `{${this.sourceDirs.join(',')}}`, '**', '*.js'))) {
            return 'javascript';
        }
        return null;
    }
    defaultOptions(dir) {
        return {
            dir,
            pagesDir: path.join(dir, 'docs'),
            sourceDir: [path.join(dir, 'src')]
        };
    }
}
exports.default = Extracter;
//# sourceMappingURL=data:application/json;base64,