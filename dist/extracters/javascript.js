"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Y = require("yuidocjs");
const tmp_1 = require("tmp");
const ui_1 = require("../ui");
const createDebug = require("debug");
process.removeAllListeners('uncaughtException');
const debug = createDebug('documenter:extracter:javascript');
function extractJavaScript(extracter) {
    debug(`Extracting API from JavaScript source`);
    let yuidocOutput = runYuidoc(extracter.sourceDirs);
    return normalize(yuidocOutput, extracter);
}
exports.default = extractJavaScript;
function runYuidoc(sourceDirs) {
    debug(`Running Yuidoc to extract inline documentation`);
    let outDir = tmp_1.dirSync({ prefix: 'yuidoc-output-', unsafeCleanup: true }).name;
    let config = {
        options: {
            project: {
                options: {
                    paths: sourceDirs,
                    outdir: outDir,
                    parseOnly: true
                }
            }
        }
    };
    let yuidoc = new Y.YUIDoc(config);
    return yuidoc.run();
}
function normalize(yuidoc, extracter) {
    debug(`Transforming Yuidoc output into Documenter standard format`);
    let api = {
        name: extracter.projectName,
        version: extracter.projectVersion,
        packages: {}
    };
    yuidoc.classitems.forEach((item) => {
        let packageName = item.module;
        if (!packageName) {
            packageName = api.name;
        }
        if (!api.packages[packageName]) {
            api.packages[packageName] = {
                classes: {},
                interfaces: {},
                functions: []
            };
        }
        let pkg = api.packages[packageName];
        // Free functions
        if (!item.class && item.itemtype === 'method') {
            debug(`Normalizing free function: ${item.name}`);
            pkg.functions.push(normalizeFunction(item));
            // Class members
        }
        else {
            normalizeClassItem(pkg, item);
        }
    });
    return api;
}
function normalizeFunction(item) {
    return {
        name: item.name,
        description: item.description,
        access: item.access,
        package: item.module,
        tags: [],
        deprecated: item.deprecated,
        file: item.file,
        line: item.line,
        signatures: [
            {
                return: {
                    type: (item.return || {}).type,
                    description: (item.return || {}).description
                },
                parameters: item.params || []
            }
        ]
    };
}
function normalizeClassItem(pkg, item) {
    debug(`Normalizing class item: ${item.name}`);
    let klass = getOrAddClass(pkg, item.class);
    if (item.is_constructor) {
        populateClass(klass, item);
    }
    else if (item.class) {
        addClassMember(klass, item);
    }
    else {
        ui_1.default.warn(`Invalid classitem found: ${item.name} is not a constructor, free function, or class member. I don't know how to document that`);
    }
}
function getOrAddClass(pkg, className) {
    if (!pkg.classes[className]) {
        pkg.classes[className] = {
            name: className,
            staticProperties: {},
            staticMethods: {},
            properties: {},
            methods: {}
        };
    }
    return pkg.classes[className];
}
function populateClass(klass, item) {
    klass.name = item.name;
    klass.description = item.description;
}
function addClassMember(klass, item) {
    if (item.itemtype === 'method') {
        addClassMethod(klass, item);
    }
    else if (item.itemtype === 'property') {
        addClassProperty(klass, item);
    }
    else {
        ui_1.default.warn(`Unrecognized itemtype: ${item.itemtype}. I don't know how to document that.`);
    }
}
function addClassMethod(klass, item) {
    let method = {
        name: item.name,
        description: item.description,
        access: item.access,
        deprecated: item.deprecated,
        inherited: null,
        file: item.file,
        line: item.line,
        tags: [],
        signatures: [
            {
                parameters: item.params || [],
                return: item.return || {}
            }
        ]
    };
    if (item.static) {
        klass.staticMethods[item.name] = method;
    }
    else {
        klass.methods[item.name] = method;
    }
}
function addClassProperty(klass, item) {
    let property = {
        name: item.name,
        description: item.description,
        type: item.type,
        access: item.access,
        deprecated: item.deprecated,
        inherited: null,
        file: item.file,
        line: item.line,
        tags: [],
    };
    if (item.static) {
        klass.staticProperties[item.name] = property;
    }
    else {
        klass.properties[item.name] = property;
    }
}
//# sourceMappingURL=data:application/json;base64,